WHAT IS PYTHON ?
1.python is a programming lanaguage 
2.it is high level & interpreted and scripted programming lanaguage
3.It is used in different type module like web developement,data sciences
4. It is developed gundo van in 1991

whay we use Python ?
1. it has high community
2. it has huge packages and libraries
3.it is secured system 
4.it is to easy learn and write as compared to other 
 
what is compiler in python ?
ans:compiler is used compile the high and low level lanaguage at time 

what is interpreter?
ans: interpreter is check the high and low level code and it can check line by line code 

what is variable in python?
ans:variable is used to store the data and said to with a variable to the value 

x=12
variable = value 
it is nothing but value any type data ex:list,str etc...

# variable  name is start with alphabets and underscore
# variable name is not start with numeric or symbol
# it will be case sensitive

what are the Data types in python and explain each of them?
ans: int,str,boolean,float,list,tuple,complex ,set,dictionary

NUMERIC Type:::
    integer:integer is data type in python and it represented in the numeric value 
       1. this can positive or negative
       this can resprented like 
    float : then float also data type which represent numeric value with a floating point
      * this can positive or negative value 
       example :23.09

    complex : the is also data type and it having the real and imaginary parts 
      example:  2+3j







"""   house=12 """

string:
   1.the string is data type which is represent sequences of characters like alphabets,numbers,symbols
   2.then string are represented in the '' and "" and  """
   
   string="house123" or 'hougr23@' or """house123@"""


list : this is sequence data type and it is place the values between the square brackets
  * we can store any type value like numeric,string, boolean 

  list=['greek',"greek",123,123.4]

tuple :



Set :



Dictionary:


None:


FRogenSet:

range: range give as (1,3)

isthe can know 1 is starting and 3 is the ending ones


<-------------# About OOP concepts-------------------------------->

  
"""
 what is OOP?

 ans: OOP stands for Object-Oriented Programming. 
 It is a programming paradigm that uses "objects" to represent data and methods to
  manipulate that data. OOP focuses on the concepts of encapsulation, inheritance, 
  polymorphism, and abstraction to create modular and reusable code.
1.inheritance

  Inheritance is a mechanism in OOP that allows one class (child class) to inherit 
  the attributes and methods of another class (parent class). This promotes 
  code reusability and establishes a relationship between classes.
   Types of inheritance:
  
  1.single inheritance: A child class inherits from only one parent class.
   mainclass -> subclass

  2.multiple inheritance: A child class inherits from multiple parent classes.
   mainclass1 -> 
   parent->
                ->subclass1 (child(parent1,parent2 datas into one child))
   mainclass 2-> 
   parent->          
               

  3.multilevel inheritance: A class is derived from a class which is also derived from
   another class.
    mainclass -> subclass1 -> subclass2
    grandparent->parent->child
  
  4.hierarchical inheritance: Multiple child classes inherit from a single parent class.
             -> subclass1
    mainclass->          
              -> subclass2
  5.hybrid inheritance: A combination of two or more types of inheritance.
    mainclass -> subclass1 -> subclass2





2.polymorphism

   Polymorphism is the ability of different objects to respond to the same method
    call in different ways. This is often achieved through method overriding and
     interfaces.


3.encapsulation

   Encapsulation is the bundling of data (attributes) 
   and methods (functions) that operate on the data into a single unit, or class. 
   It restricts direct access to some of the object's components, 
   which is a means of preventing unintended interference and misuse of the methods and
    data.

4.abstraction

   Abstraction is the concept of hiding the complex implementation details and 
   showing only the essential features of the object. 
   It helps in reducing programming complexity and increases efficiency.

5. classes and objects

    A class is a blueprint for creating objects. 
    It defines a set of attributes and methods that the created objects will have.
     An object is an instance of a class, containing real values instead of variables.

6. overriding
    Overriding is a feature in OOP that allows a subclass to provide a specific
     implementation of a method that is already defined in its superclass. 
     This is used to achieve runtime polymorphism.


"""

1. File Handling

2. Modules and Packages
3. Exception Handling
4. Iterators and Generators
5. Decorators and Higher-Order Functions
6. Context Managers
7. Lambda Functions, Map, Filter, Reduce
8. Advanced Data Structures
     Explore Pythonâ€™s specialized collections:
     set, deque, Counter, defaultdict, OrderedDict from the collections module.
9. Regular Expressions
    Use re module for pattern matching and text processing.
10. Introduction to External libraries